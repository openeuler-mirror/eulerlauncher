# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import flavors_pb2 as flavors__pb2


class FlavorGrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_flavor = channel.unary_unary(
                '/flavors.FlavorGrpcService/list_flavor',
                request_serializer=flavors__pb2.ListFlavorsRequest.SerializeToString,
                response_deserializer=flavors__pb2.ListFlavorsResponse.FromString,
                )
        self.create_flavor = channel.unary_unary(
                '/flavors.FlavorGrpcService/create_flavor',
                request_serializer=flavors__pb2.CreateFlavorRequest.SerializeToString,
                response_deserializer=flavors__pb2.FlavorResponse.FromString,
                )
        self.delete_flavor = channel.unary_unary(
                '/flavors.FlavorGrpcService/delete_flavor',
                request_serializer=flavors__pb2.DeleteFlavorRequest.SerializeToString,
                response_deserializer=flavors__pb2.FlavorResponse.FromString,
                )


class FlavorGrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list_flavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_flavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_flavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlavorGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list_flavor': grpc.unary_unary_rpc_method_handler(
                    servicer.list_flavor,
                    request_deserializer=flavors__pb2.ListFlavorsRequest.FromString,
                    response_serializer=flavors__pb2.ListFlavorsResponse.SerializeToString,
            ),
            'create_flavor': grpc.unary_unary_rpc_method_handler(
                    servicer.create_flavor,
                    request_deserializer=flavors__pb2.CreateFlavorRequest.FromString,
                    response_serializer=flavors__pb2.FlavorResponse.SerializeToString,
            ),
            'delete_flavor': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_flavor,
                    request_deserializer=flavors__pb2.DeleteFlavorRequest.FromString,
                    response_serializer=flavors__pb2.FlavorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flavors.FlavorGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlavorGrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list_flavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flavors.FlavorGrpcService/list_flavor',
            flavors__pb2.ListFlavorsRequest.SerializeToString,
            flavors__pb2.ListFlavorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_flavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flavors.FlavorGrpcService/create_flavor',
            flavors__pb2.CreateFlavorRequest.SerializeToString,
            flavors__pb2.FlavorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_flavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flavors.FlavorGrpcService/delete_flavor',
            flavors__pb2.DeleteFlavorRequest.SerializeToString,
            flavors__pb2.FlavorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
