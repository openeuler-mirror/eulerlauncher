# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vm_operations_pb2 as vm__operations__pb2


class VmOperationsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVm = channel.unary_unary(
                '/vmoperations.VmOperationsService/CreateVm',
                request_serializer=vm__operations__pb2.CreateVmRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )
        self.StartVm = channel.unary_unary(
                '/vmoperations.VmOperationsService/StartVm',
                request_serializer=vm__operations__pb2.StartVmRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )
        self.StopVm = channel.unary_unary(
                '/vmoperations.VmOperationsService/StopVm',
                request_serializer=vm__operations__pb2.StopVmRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )
        self.AttachDisk = channel.unary_unary(
                '/vmoperations.VmOperationsService/AttachDisk',
                request_serializer=vm__operations__pb2.AttachDiskRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )
        self.DetachDisk = channel.unary_unary(
                '/vmoperations.VmOperationsService/DetachDisk',
                request_serializer=vm__operations__pb2.DetachDiskRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )
        self.CreateFlavor = channel.unary_unary(
                '/vmoperations.VmOperationsService/CreateFlavor',
                request_serializer=vm__operations__pb2.CreateFlavorRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )
        self.DeleteFlavor = channel.unary_unary(
                '/vmoperations.VmOperationsService/DeleteFlavor',
                request_serializer=vm__operations__pb2.DeleteFlavorRequest.SerializeToString,
                response_deserializer=vm__operations__pb2.VmResponse.FromString,
                )


class VmOperationsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttachDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetachDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFlavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFlavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VmOperationsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVm': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVm,
                    request_deserializer=vm__operations__pb2.CreateVmRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
            'StartVm': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVm,
                    request_deserializer=vm__operations__pb2.StartVmRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
            'StopVm': grpc.unary_unary_rpc_method_handler(
                    servicer.StopVm,
                    request_deserializer=vm__operations__pb2.StopVmRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
            'AttachDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachDisk,
                    request_deserializer=vm__operations__pb2.AttachDiskRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
            'DetachDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.DetachDisk,
                    request_deserializer=vm__operations__pb2.DetachDiskRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
            'CreateFlavor': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFlavor,
                    request_deserializer=vm__operations__pb2.CreateFlavorRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
            'DeleteFlavor': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFlavor,
                    request_deserializer=vm__operations__pb2.DeleteFlavorRequest.FromString,
                    response_serializer=vm__operations__pb2.VmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vmoperations.VmOperationsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VmOperationsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/CreateVm',
            vm__operations__pb2.CreateVmRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/StartVm',
            vm__operations__pb2.StartVmRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/StopVm',
            vm__operations__pb2.StopVmRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AttachDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/AttachDisk',
            vm__operations__pb2.AttachDiskRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetachDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/DetachDisk',
            vm__operations__pb2.DetachDiskRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFlavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/CreateFlavor',
            vm__operations__pb2.CreateFlavorRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFlavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vmoperations.VmOperationsService/DeleteFlavor',
            vm__operations__pb2.DeleteFlavorRequest.SerializeToString,
            vm__operations__pb2.VmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
